/*
 * The MIT License
 *
 * Copyright 2014 Sven Reimers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.netbeans.scenebuilder.multiview;

import com.oracle.javafx.scenebuilder.kit.editor.EditorController;
import com.oracle.javafx.scenebuilder.kit.editor.panel.inspector.InspectorPanelController;
import com.oracle.javafx.scenebuilder.kit.editor.search.SearchController;
import com.oracle.javafx.scenebuilder.kit.metadata.property.ValuePropertyMetadata;
import java.awt.BorderLayout;
import java.util.Optional;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.netbeans.scenebuilder.multiview//FxmlInspector//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FxmlInspectorTopComponent",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.netbeans.scenebuilder.multiview.FxmlInspectorTopComponent")
@ActionReference(path = "Menu/Window/SceneBuilder", position = 100)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FxmlInspectorAction",
        preferredID = "FxmlInspectorTopComponent"
)
@Messages({
    "CTL_FxmlInspectorAction=FXML Inspector",
    "CTL_FxmlInspectorTopComponent=FXML Inspector Window",
    "HINT_FxmlInspectorTopComponent=This is a FxmlInspector window"
})
public final class FxmlInspectorTopComponent extends TopComponent implements LookupListener {

    private final JFXPanel jfxPanel = new JFXPanel();
    private Lookup.Result<Node> nodeResult;
    private Lookup.Result<EditorController> editorControllerResult;
    private InspectorPanelController inspectorPanelController;
    
    public FxmlInspectorTopComponent() {
        initComponents();
        setName(Bundle.CTL_FxmlInspectorTopComponent());
        setToolTipText(Bundle.HINT_FxmlInspectorTopComponent());
        setLayout(new BorderLayout());
        this.add(jfxPanel, BorderLayout.CENTER);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        nodeResult = Utilities.actionsGlobalContext().lookupResult(Node.class);
        LookupListener nodeLkpL = (event) -> {
            final Optional<? extends Node> optionalNode = nodeResult.allInstances().stream().findFirst();
            if (optionalNode.isPresent()) {
                editorControllerResult = optionalNode.get().getLookup().lookupResult(EditorController.class);
                resultChanged(new LookupEvent(editorControllerResult));
            }
        };
        nodeResult.addLookupListener(nodeLkpL);
        nodeLkpL.resultChanged(new LookupEvent(nodeResult));
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private EditorController currentController = null;
    
    @Override
    public void resultChanged(LookupEvent le) {    
        final Optional<? extends EditorController> optionalController = editorControllerResult.allInstances().stream().findFirst();
        optionalController.ifPresent(controller -> {
        if (currentController != controller) {
                currentController = controller;
                Platform.runLater(() -> {
                    inspectorPanelController = new InspectorPanelController(optionalController.get());
                    final VBox vbox = new VBox();
                    SearchController searchController = new SearchController(optionalController.get());
                    StackPane pane = new StackPane(searchController.getPanelRoot());
                    vbox.getChildren().add(pane);
                    vbox.getChildren().add(inspectorPanelController.getPanelRoot());
                    searchController.textProperty().addListener((ChangeListener<String>) (ov, oldStr, newStr) -> inspectorPanelController.setSearchPattern(newStr));
                    Scene scene = new Scene(vbox);
                    searchController.getPanelRoot().getStyleClass().add("theme-presets");
                    scene.getStylesheets().add(this.getClass().getResource("Theme.css").toExternalForm());
                    scene.getStylesheets().add(this.getClass().getResource("NbSceneBuilder.css").toExternalForm());
                    jfxPanel.setScene(scene);
                });
            }
        });
        if(!optionalController.isPresent()) {
            Platform.runLater(() -> {
                currentController = null;
                Label label = new Label("No Scene Builder Content");
                BorderPane borderPane = new BorderPane();
                borderPane.setCenter(label);
                Scene scene = new Scene(borderPane);
                jfxPanel.setScene(scene);
            });
        }
    }
    
    void revealPropertyInInspectorEditor(ValuePropertyMetadata propMeta) {
        // Expand the inspector section
        String inspectorSection = propMeta.getInspectorPath().getSectionTag();
        if (inspectorSection.equalsIgnoreCase("properties")) { //NOI18N
            Platform.runLater(() -> inspectorPanelController.setExpandedSection(InspectorPanelController.SectionId.PROPERTIES));
        } else if (inspectorSection.equalsIgnoreCase("layout")) {//NOI18N
            Platform.runLater(() -> inspectorPanelController.setExpandedSection(InspectorPanelController.SectionId.LAYOUT));
        } else if (inspectorSection.equalsIgnoreCase("code")) {//NOI18N
            Platform.runLater(() -> inspectorPanelController.setExpandedSection(InspectorPanelController.SectionId.CODE));
        }

        // Need to delay the focus to the editor, so that the section is actually expanded first.
        Platform.runLater(() -> Platform.runLater(() -> inspectorPanelController.setFocusToEditor(propMeta.getName())));
    }
    
}
